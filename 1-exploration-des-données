# Chargement des libraries
library(Hmisc) # histogramme
library(lattice) # graphiques R
library(car) # package permettant d'allouer un libellé à une modalité
library(gmodels) # package qui permet de faire un tableau du style proc freq de sas
library(questionr) # calcul du v-cramer
library(corrplot) # affichage du cramer 
library(pRoc) # Calcul de l'aire sous la courbe de ROC


# Résumé des variables
summary(credit)

# Listes des varible par catégories
list_var_quant = c("Age", "Duree_credit", "Montant_credit")
list_var_qual = c()
cible = 

# Histogramme des variables quantitatives
hist_function <- function (data_, list_var_quant) {
    data_ <- data_[,list_var_quant]
    for (i in (1:length(list_var_quant))) {
        hist(data_[,i], breaks = 10, col = "lightblue", border = "gray", xlab = "values", 
        main = colnames(data_)[i], xaxp = c(0, max(data_[,i]), 5))
    }
}

# Histogramme des variables quantitatives par modalité de varible cible
hist_function_by_cible <- function (data_, list_var_quant, cible) {
    data_ <- cbind(data_[,list_var_quant], data_[,cible])
    colnames(data_) <- c(list_var_quant, cible)
    for (i in (1:length(list_var_quant))) {
        histogram(~colnames(data_)[i] | cible, data = data_, type = "percent", col = "lightblue", breaks = 10)
    }
}

# Résumé des variables par modalité de la variable cible
data_ = credit
by(data_[,list_var_quant], list(Cible=data_[,cible]), summary)

# Correlation


# K-Wallis normalisé: tester l'intensité de la liaison entre la variable cible et les variables quantitatives
k_walis_function <- function (data_, list_var_quant, cible) {
  options(warn=-1)
  data_ <- cbind(data_[,list_var_quant], data_[,cible])
  colnames(data_) <- c(list_var_quant, cible)
  num_cible = grep(paste('(Cle|', cible, ')', sep=""), names(data_))
  k_walis <- matrix(NA, ncol(data_), 3)
  for (i in (1:ncol(data_))) {
    k_walis[i,1] <- names(data_[i])
    k_walis[i,2] <- kruskal.test(data_[,i]~data_[, cible])$statistic
    k_walis[i,3] <- sqrt(kruskal.test(data_[,i]~data_[, cible])$statistic/sum(!is.na(data_[,cible])))
  }
  colnames (k_walis) <- c("Variable", "K Walis", "K Walis ajusté")
  
  k_walis_test <- k_walis[order(k_walis[,3], decreasing=T),T]
  
  print(k_walis_test)
}

# K-Wallis croisé


# V-Cramer: tester l'intensité de la liaison entre la variable cible et les variables qualitatives
cramer_function <- function (data_, list_var_quant, cible) {
  options(warn=-1)
  data_ <- cbind(data_[,list_var_quant], data_[,cible])
  num_cible = grep(paste('(Cle|', cible, ')', sep=""), names(data_))
  cramer <- matrix(NA, ncol(data_), 3)
  for (i in (1:ncol(data_))) {
    cramer[i,1] <- names(data_[i])
    cramer[i,2] <- sqrt(chisq.test(table(data_[,i], data_[,num_cible]))$statistic/(length(data_[,2])))
    cramer[i,3] <- chisq.test(table(data_[,i], data_[,num_cible]))$p.value
  }
  colnames (cramer) <- c("Variable", "V de Cramer", "p-value")
  
  vcramer <- cramer[order(cramer[,2], decreasing=T),T]
  
  print(vcramer)
}

# V-cramer des variables qualitatives
cramer_vroise_function <- function (data_) {
    options(warn=-1)
    
    # calcul du cramer
    cramer <- matrix(NA, ncol(data_), ncol(data_))
    for (i in (1:ncol(data_))) {
        for (j in (1:ncol(data_))) {
            cramer[i,j] <- cramer.v(table(data_[,i], data_[,j]))
        }
   }
   colnames(cramer) <- colnames(data_)
   rownames(cramer) <- colnames(data_)
   
   # Affichage du cramer
   corrplot(cramer, type='upper', tl.str=45, tl.cl='black', diag=F, addCoef.col='black', addCoefasPercent=T)
}

# Discretisation manuelle des varibles quantitatives
## 
q <- quantile(credit$Age, seq(0, 1, by=0.1))
q[1] <- q[1] - 1
q_age <- cut(credit$Age, q)
tab <- table(q_age, credit$Cible)
colnames(tab) <- c("Paye", "Impaye")
prop.table(tab,1)

## Représentation du taux d'impayé par age
barplot(t(prop.table(tab,1)[,2]), ylim=c(0, 0.5), las=3, main="Age", ylab="Taux impayés", density=0)
abline(h=.3, lty=2)

barplot(t(tab),beside=T,ylim=c(0,110),legend.text=colnames(tab),
  col=c("grey50","grey80"),ylab="Fréquence")
abline(h=30, lty=2)

## Découpage de la variable Age
Age <- cut(credit$Age, c(0,25,Inf)
tab <- table(Age, credit$Cible)
prop.table(tab,1)

## Fréquence des varibles quali vs cible pour efectuer les regroupements des modalités les plus proches
ct <- function (x) {
    cat ('\n', names(data_)[x], '\n')
    cbind(prop.table(table(data_[,x], data_[,cible]), 1), addmargins(table(data_[,x]))[-(nlevels(data_[,x])+1)])
}
for (i in (1:ncol(data_))) {
    if (!(names(data_[i])) %in% c("Cle", "Cible", list_var_quant)) {
        print (ct(i))
    }
}

## Renommer, regrouper les libellés des varibles qualitatives
recode(data_[,'Comptes'], "'A11'='Pas de compte'; 'A12'='CC < 0 euros'; c('A13', 'A13')='CC [0-200euros['; 'A14'='CC >200euros' ")
recode(data_[,'Statut_domicile'], "'A152' = 'Proprietaire'; else='Non proprietaire' ")

## Tableau proc freq
CrossTable(data_[,'Comptes'], data_[,'Cible'], prop.chisq=F, chisq=T, format="SAS")


# Discrétisation automatique des varibles
evol_auc <- NA
disc_function <- function(data_, x, y, h=0, k=0, pAUC=0, nbmod=3, calcul=1, algo="Nelder-Mead", graphe=0) {
    # renommage des variable
    attach(data_)
    Xt <- x
    Yt <- y
    detach(data_)
    
    # Traitement des valeurs manquantes
    X <- Xt[is.na(Xt)==0]
    X <- Yt[is.na(Xt)==0]
    
    seuils <- as.vector(quantile(X, seq(0, 1, length=(nbmod+1))))[2:nbmod]
    
    fit_auc <- function (s) {
        s2 <- c(-Inf, unique(s), Inf)
        qX <- cut(X, s2)
        tab <- table(qX,Y)
        logit <- glm(Y~qX, family=binomial(link="logit"))
        qXn <- predict(logi, newdata=base[is.na(Xt)==0,], type='response')
        resultat <- auc(Y,qXn, partial.auc=c(1,pAUC), partial.auc.correct=FALSE) *
                    (1-sum((table(qX)/length(X))^2))/(1-(1-h)*(sum((table(qX)/length(X))^2))) * 
                    ((1-(1-K)*(sum(prop.table(tab,1)[,2])^2)))/(1-sum((prop.table(tab,1)[,2])^2)))
        
        return (-resultat)
    }
    
    # Application du  decoupage
    Applical <- function () {
        sf <- unique(c(-Inf, est$par, Inf)) # pour le cas de plusieurs seuil égaux
        qX <- cut(Xt, sf)
        tab <- table (addNA(qX), Yt) 
        cat('\n', 'Résultat du découpage: ', '\n')
        cat('\n', 'Seuils % Négat. % Posit. # + # % #', '\n')
        print(cbind(prop.table(tab,1)*100, tab[,2], table(addNA(qX)), table(addNA(qX))*100/length(Xt)))
        cat('\n', 'indicateur de convergence (0 = convergence optimisation)', '\n')
        cat(est$convergence)
        cat('\n', 'AUC (partiel) maximisée: ', '\n')
        cat(-est$value)
        cat('\n', 'Hommogénéité des classes (0 <- faible ... forte -> 0): ', '\n')
        cat(1-sum((prop.table(table(addNA(qX), Yt), 1)[,2])^2))
        
        return(qX)
    }
    
    # Calcul de l'aire sous la courbe ROC
    Gini <- function (t) {
        cat('\n', 'AUC avant découpage: ', '\n')
        logit<- glm(Y~X, family=binomial(link='logit'))
        g1 <- auc(Y, predict(logit, newdata=data_[is.na(Xt)==0,], type='response'))
        cat(g1)
        cat('\n', 'AUC après découpage: ', '\n')
        logit<- glm(Yt~t, family=binomial(link='logit'))
        g2 <- auc(Yt, predict(logit, newdata=data_, type='response'))
        cat(g2)
        evol_auc <- cat(100*(g2-g1)/g1)
        cat('\n', '% Evolution AUC avant/après découpage ', '\n')
        return (evol_auc)
        cat('\n')
    }
    
    # Recherche des seuils optimaux
    if (calcul == 1) {
        est <- optim(seuils, fit_auc, method=algo)
    } else {
        est <- list()
        est$par <- bornes
        est$convergence <- 0
        est$value <- 0
    }
    cat('\n', '-------------------------------------------------------------------------------', '\n')
    cat('\n', 'Discrétisation de ', substitute(x), 'en ', nbmod, 'classes (algorithme ',algo,'), \n')
    cat('\n', '-------------------------------------------------------------------------------', '\n')
    
    qX1 <- Applical()
    evol_auc <- Gini (qX1)
    
    # Courbe de densité
    if (graphe == 1) {
        x11()
        layout(matrix(c(1,2), 2, 1, byrow = TRUE), heights = c(3,1))
        par(mar = c(2, 4, 4, 1))
        base0 <- X[Y==0]
        base1 <- X[Y==1]
        xlim1 <- range(c(base0, base1))
        ylim1 <- c(0, max(max(density(base0)$y), max(density(base1)$y)))
        plot(density(base0), main = " ", col ="blue", ylab = paste("Densité de ", deparse(substitute(x))), xlim = xlim1, ylim = ylim1, lwd = 2)
        par(new = TRUE)
        plot(density(base1), col = "red", lty = 3, lwd = 2, xlim = xlim1, ylim = ylim1, xlab = '', ylab = '', main = ' ')
        legend('topright', c(paste(deparse(substitute(y)), " = 0"), paste(deparse(substitute(y)), ' = 1')), lty = c(1,3), col = c('blue', 'red'), lwd = 2)
        abline(v = est$par, lty = 2)
        texte <- c('Chi2 de K-Wallis = \n\n', round(kruskal.test(X~Y)$statistic, digit = 3))
        text(xlim1[2]*0.8, ylim1[2]*0.5, texte, cex = 0.75)
        plot(X~Y, horizontal = TRUE, xlab = deparse(substitute(y)), col = c('blue', 'red'))
    }
    return (evol_auc)
}

disc <- function (data_, list_var_quant, cible, max_class = 5, resume = 1) {
    disc_resume <- matrix(NA, length(list_var_quant), 5)
    for (i in (1:length(list_var_quant))) {
        disc_resume[i,1] <- list_var_quant[i]
        for (j in (2:max_class)) {
            evol_auc <- disc_function (data_, list_var_quant[i], cible, nbmod = j, h = 0, k = 0, pAUC = 0.8, graphe = 0)
            disc_resume[i,j] <- evol_auc 
        }
    }
    colmanes(disc_resume) <- c('Variable', 'Aug_AUC1', 'Aug_AUC2', 'Aug_AUC3', 'Aug_AUC4', 'Aug_AUC5')
    
    # Afficher le resumé de la discretisation automatique
    if (resume == 1) {
        print (disc_resume)
    }
}


## Renommer, regrouper les libellés des varibles qualitatives
recode(data_[,'Comptes'], "'A11'='Pas de compte'; 'A12'='CC < 0 euros'; c('A13', 'A13')='CC [0-200euros['; 'A14'='CC >200euros' ")
recode(data_[,'Statut_domicile'], "'A152' = 'Proprietaire'; else='Non proprietaire' ")

# Nouvelle base d'étude


# Diagramme en barre des varibles quantilatives discrétisées

x1 <- c(23.2,34.5,76.3,65.8,12.6)
x2 <- c(15.6,12.4,21.8,20,5.2)
A <- gl(5,1,5,labels=c("a1","a2","a3","a4","a5"))
data <- cbind(x1,x2)
rownames(data) <- levels(A)
barplot(x1,names.arg=levels(A))
barplot(t(data),beside=T,ylim=c(0,100),legend.text=colnames(data),
  col=c("grey50","grey80"),ylab="Fréquence")
