# Chargement des libraries
library(Hmisc) # histogramme
library(lattice) # graphiques R
library(car) # package permettant d'allouer un libellé à une modalité
library(gmodels) # package qui permet de faire un tableau du style proc freq de sas
library(questionr) # calcul du v-cramer
library(corrplot) # affichage du cramer 


# Résumé des variables
summary(credit)

# Listes des varible par catégories
list_var_quant = c("Age", "Duree_credit", "Montant_credit")
list_var_qual = c()
cible = 

# Histogramme des variables quantitatives
hist_function <- function (data_, list_var_quant) {
    data_ <- data_[,list_var_quant]
    for (i in (1:length(list_var_quant))) {
        hist(data_[,i], breaks = 10, col = "lightblue", border = "gray", xlab = "values", 
        main = colnames(data_)[i], xaxp = c(0, max(data_[,i]), 5))
    }
}

# Histogramme des variables quantitatives par modalité de varible cible
hist_function_by_cible <- function (data_, list_var_quant, cible) {
    data_ <- cbind(data_[,list_var_quant], data_[,cible])
    colnames(data_) <- c(list_var_quant, cible)
    for (i in (1:length(list_var_quant))) {
        histogram(~colnames(data_)[i] | cible, data = data_, type = "percent", col = "lightblue", breaks = 10)
    }
}

# Résumé des variables par modalité de la variable cible
by(credit[,c("Age", "Duree_credit", "Montant_credit")], list(Cible=credit$cible), summary)

# K-Wallis normalisé: tester l'intensité de la liaison entre la variable cible et les variables quantitatives
k_walis_function <- function (data_, list_var_quant, cible) {
  options(warn=-1)
  data_ <- cbind(data_[,list_var_quant], data_[,cible])
  colnames(data_) <- c(list_var_quant, cible)
  num_cible = grep(paste('(Cle|', cible, ')', sep=""), names(data_))
  k_walis <- matrix(NA, ncol(data_), 3)
  for (i in (1:ncol(data_))) {
    k_walis[i,1] <- names(data_[i])
    k_walis[i,2] <- kruskal.test(data_[,i]~data_[, cible])$statistic
    k_walis[i,3] <- sqrt(kruskal.test(data_[,i]~data_[, cible])$statistic/sum(!is.na(data_[,cible])))
  }
  colnames (k_walis) <- c("Variable", "K Walis", "K Walis ajusté")
  
  k_walis_test <- k_walis[order(k_walis[,3], decreasing=T),T]
  
  print(k_walis_test)
}

# V-Cramer: tester l'intensité de la liaison entre la variable cible et les variables qualitatives
cramer_function <- function (data_, list_var_quant, cible) {
  options(warn=-1)
  data_ <- cbind(data_[,list_var_quant], data_[,cible])
  num_cible = grep(paste('(Cle|', cible, ')', sep=""), names(data_))
  cramer <- matrix(NA, ncol(data_), 3)
  for (i in (1:ncol(data_))) {
    cramer[i,1] <- names(data_[i])
    cramer[i,2] <- sqrt(chisq.test(table(data_[,i], data_[,num_cible]))$statistic/(length(data_[,2])))
    cramer[i,3] <- chisq.test(table(data_[,i], data_[,num_cible]))$p.value
  }
  colnames (cramer) <- c("Variable", "V de Cramer", "p-value")
  
  vcramer <- cramer[order(cramer[,2], decreasing=T),T]
  
  print(vcramer)
}

# V-cramer des variables qualitatives
cramer_vroise_function <- function (data_) {
    options(warn=-1)
    
    # calcul du cramer
    cramer <- matrix(NA, ncol(data_), ncol(data_))
    for (i in (1:ncol(data_))) {
        for (j in (1:ncol(data_))) {
            cramer[i,j] <- cramer.v(table(data_[,i], data_[,j]))
        }
   }
   colnames(cramer) <- colnames(data_)
   rownames(cramer) <- colnames(data_)
   
   # Affichage du cramer
   corrplot(cramer, type='upper', tl.str=45, tl.cl='black', diag=F, addCoef.col='black', addCoefasPercent=T)
}

# Discretisation manuelle des varibles quantitatives
## 
q <- quantile(credit$Age, seq(0, 1, by=0.1))
q[1] <- q[1] - 1
q_age <- cut(credit$Age, q)
tab <- table(q_age, credit$Cible)
colnames(tab) <- c("Paye", "Impaye")
prop.table(tab,1)

## Représentation du taux d'impayé par age
barplot(t(prop.table(tab,1)[,2]), ylim=c(0, 0.5), las=3, main="Age", ylab="Taux impayés", density=0)
abline(h=.3, lty=2)

barplot(t(tab),beside=T,ylim=c(0,110),legend.text=colnames(tab),
  col=c("grey50","grey80"),ylab="Fréquence")
abline(h=30, lty=2)

## Découpage de la variable Age
Age <- cut(credit$Age, c(0,25,Inf)
tab <- table(Age, credit$Cible)
prop.table(tab,1)

## Fréquence des varibles quali vs cible pour efectuer les regroupements des modalités les plus proches
ct <- function (x) {
    cat ('\n', names(data_)[x], '\n')
    cbind(prop.table(table(data_[,x], data_[,cible]), 1), addmargins(table(data_[,x]))[-(nlevels(data_[,x])+1)])
}
for (i in (1:ncol(data_))) {
    if (!(names(data_[i])) %in% c("Cle", "Cible", list_var_quant)) {
        print (ct(i))
    }
}

## Renommer, regrouper les libellés des varibles qualitatives
recode(data_[,'Comptes'], "'A11'='Pas de compte'; 'A12'='CC < 0 euros'; c('A13', 'A13')='CC [0-200euros['; 'A14'='CC >200euros' ")
recode(data_[,'Statut_domicile'], "'A152' = 'Proprietaire'; else='Non proprietaire' ")

## Tableau proc freq
CrossTable(data_[,'Comptes'], data_[,'Cible'], prop.chisq=F, chisq=T, format="SAS")


# Discrétisation automatique des varibles


# Nouvelle base d'étude


# Nouvelle liste des varibles quantitatives


# Diagramme en barre des varibles quantilatives discrétisées

x1 <- c(23.2,34.5,76.3,65.8,12.6)
x2 <- c(15.6,12.4,21.8,20,5.2)
A <- gl(5,1,5,labels=c("a1","a2","a3","a4","a5"))
data <- cbind(x1,x2)
rownames(data) <- levels(A)
barplot(x1,names.arg=levels(A))
barplot(t(data),beside=T,ylim=c(0,100),legend.text=colnames(data),
  col=c("grey50","grey80"),ylab="Fréquence")
